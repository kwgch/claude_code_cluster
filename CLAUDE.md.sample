# Claude Code 並列実行プロジェクト

## プロジェクトの本質

このプロジェクトは、**Claude Codeが必要に応じて必要なだけサブプロセスを生成し、複数のClaude Codeインスタンスを立ち上げ、作業を並列で行い、効率化する**ためのフレームワークです。

### 核心的な価値提案

1. **動的スケーリング**: タスクの複雑さとシステムリソースに基づいて、最適な数のClaude Codeインスタンスを自動的に起動
2. **真の並列処理**: 各インスタンスが独立して作業を進め、ファイルベースの通信で協調
3. **効率の最大化**: 従来の逐次処理から並列処理へ移行し、複雑なプロジェクトの完了時間を大幅に短縮

## アーキテクチャ概要

```
┌─────────────────┐
│  Manager Claude │ （あなた）
└────────┬────────┘
         │ 指示書作成・プロセス管理
         │
    ┌────┴────┬────────┬────────┐
    ▼         ▼        ▼        ▼
┌─────────┐┌─────────┐┌─────────┐┌─────────┐
│Worker 1 ││Worker 2 ││Worker 3 ││Worker N │
│Backend  ││Frontend ││Testing  ││  ...    │
└─────────┘└─────────┘└─────────┘└─────────┘
    │         │        │        │
    └─────────┴────────┴────────┘
              │
         ファイルベース通信
         (comm/*.txt)
```

## 技術的実装

### TTY制限の解決
- **問題**: Claude CLIは対話的端末(TTY)を必要とし、通常のバックグラウンドプロセスでは動作しない
- **解決**: `node-pty`ライブラリを使用して擬似端末環境を提供

### 並列実行の仕組み
```javascript
// 各ワーカーに対してPTY環境でClaude CLIを起動
const ptyProcess = pty.spawn('claude', [instructions], {
    name: 'xterm-color',
    env: { TERM: 'xterm-256color' }
});
```

## 利用パターン

### 1. 大規模開発プロジェクト
```bash
# 6つのワーカーでフルスタックアプリケーションを構築
Worker 1: バックエンドAPI開発
Worker 2: フロントエンドUI実装
Worker 3: 認証システム構築
Worker 4: リアルタイム機能実装
Worker 5: テストスイート作成
Worker 6: Docker化とドキュメント作成
```

### 2. 研究・分析タスク
```bash
# 4つのワーカーで並列調査
Worker 1: 技術調査とプロトタイプ
Worker 2: 競合分析とベンチマーク
Worker 3: セキュリティ評価
Worker 4: パフォーマンス最適化
```

### 3. コンテンツ生成
```bash
# 複数ワーカーで大規模ドキュメント作成
Worker 1: API リファレンス生成
Worker 2: チュートリアル作成
Worker 3: サンプルコード開発
Worker 4: 統合とレビュー
```

## 実行方法

### 基本コマンド
```bash
# セットアップ
./setup_node_runner.sh

# 並列実行
node parallel_claude_runner.js worker1_instructions.md worker2_instructions.md ...
```

### タスク定義
1. `task.md` にメインタスクを記述
2. システムが自動的にワーカー数を決定
3. 各ワーカーに適切な指示書を生成
4. 並列実行とモニタリング

## モニタリングと通信

### リアルタイム監視
- プロセス状態の可視化
- 各ワーカーの進捗追跡
- エラー検出と対処

### ワーカー間通信
```bash
# ステータス更新
echo "[Worker1] Status: API実装完了" >> comm/worker1_status.txt

# 完了通知
echo "[Worker1] COMPLETED: バックエンドAPI準備完了" >> comm/worker1_status.txt
```

## 期待される効果

### 開発速度の向上
- **従来**: 1人のClaude Codeが順番にタスクを処理
- **並列化後**: N個のClaude Codeが同時に異なる部分を開発

### 品質の向上
- 各ワーカーが専門分野に集中
- 並列レビューとテスト
- 統合的な品質保証

### スケーラビリティ
- タスクの規模に応じて動的にワーカー数を調整
- システムリソースの最適利用
- 将来的にはクラウド環境での分散実行も可能

## 今後の展望

1. **Claude API統合**: CLIに加えてAPI経由での並列実行
2. **分散実行**: 複数マシンでのワーカー分散
3. **自動最適化**: タスクの自動分割と割り当て
4. **可視化ダッシュボード**: Web UIでの進捗管理

## 使用上の注意

- 各ワーカーは独立したClaude Codeインスタンスとして動作
- ファイルの競合を避けるため、各ワーカーは異なるディレクトリで作業
- リソース使用量に注意（メモリ約2GB/ワーカー）

---

このプロジェクトは、AIアシスタントの並列化という新しいパラダイムを実現し、複雑なソフトウェアプロジェクトの開発を革新的に効率化します。